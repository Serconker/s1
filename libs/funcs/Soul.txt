@name Searren Opperating Utillity Language core
@persist [C]:table
@persist [Func Buttons Objects Groups]:array
@persist [Ph_String]:string
@persist Sorted
#include "s1/libs/funcs/S1_funs"
#include "s1/libs/funcs/io/S1_IO"
function void pushLog(S:string){
    if(Sys_log:count()==0){
        Sys_log[1,string]=S
    }else{
        Sys_log[Sys_log:count()+1,string]=S
    }
    print(Sys_log)
}
function void soulCode(S:string,N){
 Sorted = 0
    if(N!=1){
        C[1,array] = S:explode(".")
        printTable(C)
    }else{
        local S = S:explode(";")
        for(I=1,S:count()){
            C[I,array]=S[I,string]:trim():explode(".")
            if(I == S:count()){
                Sorted = 1
            }
        }
    }
    if(Sorted == 1){
        printTable(C)
        if(C[1,array][1,string]=="soulStart"){
            timer("RunSoul",0)
            SoulI = 1
        }
    }
}
## V Main ##
function void soulCode(C:array,N){
 print(1)
 Func = C[N,string]:explode(".")
 print(Func)
    if(Func[1,string]=="core"){
        print(2)
        pushLog(time("day")+"/"+time("month")+"/"+time("hour")+":"+time("min")+": Entered core with '"+C[N,string]+"' function")
        if(Func[2,string]=="egp"){
            print(3)
            if(Func[3,string]=="group"){
                print(4)
                if(Func[4,string]=="add"){
                    print(5)
                    ##Placeholder
                }
            }elseif(Func[3,string]=="main"){ ##core.egp.main.create.box.1.256.256.64.64.1
                print(6)
                if(Func[4,string]=="create"){ ##core.egp.main.create.box.1.256.256.64.64.1
                    print(7)
                    if(Func[5,string]=="box"){
                        print(9)
                        S:egpBox(Func[6,string]:toNumber(),vec2(Func[7,string]:toNumber(),Func[8,string]:toNumber()),vec2(Func[9,string]:toNumber(),Func[10,string]:toNumber()))
                        Objects[Func[6,string]:toNumber(),string]="box.static."+Func[11,string]
                        Groups[Func[11,string]:toNumber(),string]=Groups[Func[11,string]:toNumber(),string]+"."+Func[6,string]:toNumber()
                        pushLog(time("day")+"/"+time("month")+"/"+time("hour")+":"+time("min")+": Created a box with soul")
                    }elseif(Func[5,string]=="boxr"){
                        print(10)
                        S:egpRoundedBox(Func[6,string]:toNumber(),vec2(Func[7,string]:toNumber(),Func[8,string]:toNumber()),vec2(Func[9,string]:toNumber(),Func[10,string]:toNumber()))
                        Objects[Func[6,string]:toNumber(),string]="boxr.static."+Func[11,string]
                        Groups[Func[11,string]:toNumber(),string]=Groups[Func[11,string]:toNumber(),string]+"."+Func[6,string]:toNumber()
                        pushLog(time("day")+"/"+time("month")+"/"+time("hour")+":"+time("min")+": Created a rounded box with soul")
                    }elseif(Func[5,string]=="circ"){
                        print(11)
                        S:egpCircle(Func[6,string]:toNumber(),vec2(Func[7,string]:toNumber(),Func[8,string]:toNumber()),vec2(Func[9,string]:toNumber(),Func[10,string]:toNumber()))
                        Objects[Func[6,string]:toNumber(),string]="circ.static."+Func[11,string]
                        Groups[Func[11,string]:toNumber(),string]=Groups[Func[11,string]:toNumber(),string]+"."+Func[6,string]:toNumber()
                        pushLog(time("day")+"/"+time("month")+"/"+time("hour")+":"+time("min")+": Created a circle with soul")
                    }elseif(Func[5,string]=="etc"){
                        Index = Func[6,string]:toNumber()
                        print(12)
                        print(Func:count()-10)
                        for(I=1,Func:count()-10){
                            print(13)
                            print(Func[10+I,string])
                            print(Func:count()-10)
                            if(Func[10+I,string]:find("v,")){
                                print(14)
                                Func[10+I,string]:replace(Func[10+I,string],Trunk[Func[10+I,string]:explode("v,")[2,string],string])
                            }else{
                                print(15)
                                Ph_String = Ph_String+Func[10+I,string]                        
                                print("String3 = "+Ph_String)
                            }
                                if(I==Func:count()-10){
                                    print(16)
                                    print("String = "+Ph_String)
                                    #[
                                    S:etc(
                                    Func[6,string]:toNumber(),
                                    Ph_String,
                                    vec2(Func[7,string]:toNumber(),Func[8,string]:toNumber()),
                                    Func[9,string]:toNumber())]#
                                    S:egpText(Func[6,string]:toNumber(),Ph_String,vec2(Func[7,string]:toNumber(),Func[8,string]:toNumber()))
                                    S:egpAlign(Func[6,string]:toNumber(),1,1)
                                    S:egpSize(Func[6,string]:toNumber(),Func[9,string]:toNumber())
                                    Objects[Func[6,string]:toNumber(),string]="text.static."+Func[10,string]
                                    Groups[Func[10,string]:toNumber(),string]=Groups[Func[10,string]:toNumber(),string]+"."+Func[6,string]:toNumber()
                                    pushLog(time("day")+"/"+time("month")+"/"+time("hour")+":"+time("min")+": Created text with soul")
                                }#core.egp.main.create.etc.1.256.256.10.1.t.e.x.t
                                 #core.egp.main.create.etc.1.256.256.50.1.t.e.x.t
                            }
                        }else{
                            print(22)
                        }

                }else{
                    print(20)
                }

            }else{
                print(19)
            }

        }else{
            print(18)
        }

    }elseif(Func[1,string]=="end"){
        print(17)
    }else{
        print("Soul: invalid entry on Function 1; "+C[N,string]+", "+Func[1,string])
    }
}
#[ Notes
    local Y1 = S:egpPos(Func[6,string]:toNumber()):y()-(S:egpSize(Func[6,string]:toNumber()):y()/2)
    local X1 = S:egpPos(Func[6,string]:toNumber()):x()-(S:egpSize(Func[6,string]:toNumber()):x()/2)
    local Y2 = S:egpPos(Func[6,string]:toNumber()):y()+(S:egpSize(Func[6,string]:toNumber()):y()/2)
    local X2 = S:egpPos(Func[6,string]:toNumber()):x()+(S:egpSize(Func[6,string]:toNumber()):x()/2)
    
                        #EGP_core["group"+Func[11,string],array]:appendNum(Func[6,string]:toNumber())
                        #EGP_core["items",array][Func[6,string]:toNumber(),string]=="boxr.static"

                        #EGP_core["group"+Func[11,string],array]:appendNum(Func[6,string]:toNumber())
                        #EGP_core["items",array][Func[6,string]:toNumber(),string]=="circ.static"
                        
                                    #EGP_core["items",array][Index,string]=Ph_String
                                    #[if(EGP_core["items",array][Index,string]!=Ph_String){
                                        EGP_core["items",array][Index,string]=Ph_String
                                        print(23)
                                        print(Func[6,string]:toNumber())
                                        print(EGP_core["items",array])
                                    }else{]#
                                    #    S:etc(Func[6,string]:toNumber(),EGP_core["items",array][Index,string]:explode(".")[3,string],vec2(Func[7,string]:toNumber(),Func[8,string]:toNumber()),Func[8,string]:toNumber())                   
                                    #}
