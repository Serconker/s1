@name S1_funs
if(first()){
#include "s1/io/S1_IO"
#Sys_log 
#Sys_log_p
	local compar = array("=", "!=", "<", ">", "=>", "=<")
    function number sys_queeProccess(){
        
    }
    
    function number sys_runProccess(){
        
    }
    function string decOR(){
		
	}
	function number decOR(){
		
	}
    function string anyIn(A:array, S:string){
        for(I=1, A:count()){
            if(S:find(A[I,string])){
                return A[I,string]
            }
            if(I == A:count()){
                return ""
            }
        }
    }
    function string shortenID(S:string){
        if(S:lower():find("steam_0:0:")){
            return httpUrlEncode(S:lower():replace("steam_0:0:",""))
        }elseif(S:lower():find("steam_1:0:")){
            return httpUrlEncode(S:lower():replace("steam_1:0:",""))
        }elseif(S:lower():find("steam_0:1:")){
            return httpUrlEncode(S:lower():replace("steam_0:1:",""))
        }
    }
    function void core_sortLogs(){
        Buff_string=""
        local Arr = Sys_log
        for(I=1,Arr:count()){
            Buff_string = Buff_string+Arr[I,string]+"
"
            Sys_log_p[Sys_log_p:count()+1,string] = Arr[I,string]
            Sys_log:remove(I)
            if(I==Arr:count()){
                
            }
        }
    }
    function string pageEGPObjects(IndexA, IndexB, Name:string){
        local A = IndexA
        local B = IndexB
        local N = Name
        if(Sys_pagedobjects:count()<2){
            Sys_pagedobjects[Sys_pagedobjects:count(),string]=A+"-"+B+"-"+N
        }else{
            for(I=1,Sys_pagedobjects:count()){
                local Ob = Sys_pagedobjects[I,string]
                local Ac = Ob:explode("-")[1,string]:toNumber()
                local Bc = Ob:explode("-")[2,string]:toNumber()
                local Nc = Ob:explode("-")[3,string]
                if(inrange(A,Ac,Bc)){
                    return "Page lower range is within anothers range.. ["+Nc+"]"
                }
                if(I==Sys_pagedobjects:count()){
                    Sys_pagedobjects[Sys_pagedobjects:count(),string]=A+"-"+B+"-"+N
                    return "Objec range paged"
                }
            }
        }
    }
    function void array:appendString(S:string){
        This[This:count()+1,string] = S
    }
    function void appendString(A:array,S:string){
        A[A:count()+1,string] = S
    }
    function void array:appendNum(N){
        This[This:count()+1,number] = N
    }
    function void appendString(A:array,N){
        A[A:count()+1,number] = N
    }
    function number patchNum1(A:string,B:string){
        local D = ""+A+""+B+""
        return D:toNumber()
    }
    function number patchNum2(A:string,B:string,C:string){
        local D = ""+A+""+B+""+C+""
        return D:toNumber()
    }
    function void appReg(S:string,Des:string){
        Apps[S,string] = Des
    }
    function number whatsLarger(N,N2){
        if(N>=N2){
            return N
        }elseif(N2>=N){
            return N2
        }
    }
    function void loadAppCFig(Stri:string){
        runOnFile(1)
        printColor(vec(225,0,0),"Trying to load app '"+Stri+"s' configuration file.")
        fileLoad(Stri:lower()+".txt")
        if(fileLoaded()){
            printColor(vec(0,255,0),"Load succesful")
            B = fileRead()
            Cfig = B:explode(" = ")
        }else{
            printColor(vec(255,0,0),"Failed to load, file doesn't exist?")
        }
    }
    function entity closestPly(){
        findByClass("player")
        return findClosest(entity():pos())   
    }
    function void wirelink:getAvatar(){
        Avatar = Data_split[15,string]
        #Avatar = ""
        if(Avatar == "0" | Avatar == ""){
            This:egpMaterial(patchNum1(Data_split[4+1,string],Data_split[4+6,string]),"gui/center_gradient")
            This:egpBox(14,vec2(Cx,Cy-10),vec2(60,60)) #Hat tope
            This:egpBox(15,vec2(Cx,Cy+patchNum1(Data_split[4+2,string],Data_split[4+10,string])),vec2(90,10)) #Hat bottom
            This:egpColor(14,vec(20,20,20))
            This:egpColor(15,vec(20,20,20))
        }else{
            This:egpMaterial(11,Avatar)
        } 
    }
    function void wirelink:keyboard(){
    
    }
    function void wirelink:updateTitle(A){
        if(A == 1){
            This:egpText(patchNum1(Data_split[4+1,string],Data_split[4+10,string]),"Current application: "+App,vec2(Apvx,Apvy))
            This:egpColor(patchNum1(Data_split[4+1,string],Data_split[4+10,string]),vec(255,255,255))
        }elseif(A == 2){
            This:egpText(patchNum1(Data_split[4+1,string],Data_split[4+10,string]),"System idling",vec2(Apvx,Apvy)) 
            This:egpColor(patchNum1(Data_split[4+1,string],Data_split[4+10,string]),vec(255,0,0)) 
        }elseif(A == 3){
        }
    }
    function void playTheme(){
        if(Data_split[16,string] != "0"){
            entity():soundPlay(2,90,""+Data_split[16,string])
        }
    }
    function string getInfo(){
        if(httpCanRequest()){
            httpRequest("http://felthatters.net/smf/qinfo.php?userid="+shortenID(closestPly():steamID()))
            if(httpClk()){
                Cl_data = httpData()
                return Cl_data
            }
        }
    }
    function void wirelink:etc(I,S:string,V:vector2,Z){
        This:egpText(I,S,V)
        This:egpSize(I,Z)
        This:egpAlign(I,1,1)
    }
    function number entity:touching(W:wirelink,I){
        local Y1 = W:egpPos(I):y()-(W:egpSize(I):y()/2)
        local X1 = W:egpPos(I):x()-(W:egpSize(I):x()/2)
        local Y2 = W:egpPos(I):y()+(W:egpSize(I):y()/2)
        local X2 = W:egpPos(I):x()+(W:egpSize(I):x()/2)
        local Vpos = W:egpCursor(This)
        if(inrange(Vpos,vec2(X1,Y1),vec2(X2,Y2))){
            return 1
        }else{
            return 0
        }
    }
    function registerChatCommand(Whieght:string, Name:string, Core:string, Arguments:string#[ S = string, N = number, V = vector, V2 = vector2 ]#, Timer:string, Delay){
        local Ins = array(Name, Core, Arguments, Timer, Delay)
        Commands[Commands:count()+1,string]= Whieght+"."+Name+".{"+Core+"."+Arguments+"."+Timer+"."+Delay
        #print(Commands[Commands:count(),string])
    }
    function string core_findSettingValue(S:string){
        for(I=1,Sys_settings:count()){
            local A = Sys_settings[I,string]:explode("=")[1,string]
            local B = Sys_settings[I,string]:explode("=")[2,string]
            if(A:find(S)){
                return B
            }elseif(I==Sys_settings:count()){
                return ""
            }
        }
    }
    function number checkChatCommands(){
        local Str = lastSaid():lower():explode(" ")
        if(Commands:count()>=50){
            return 0
        }else{
            for(I=1, Commands:count()){
                local C = Commands[I,string]:explode(".")
                if(C[1,string]=="Owner"&&lastSpoke()==owner()){
                    print("Owner")
                    print(C[3,string]+" "+Str[1,string])
                    if(C[3,string]==Str[1,string]){
                        print(C[3,string]+" "+Str[1,string])
                        if(C[2,string]==Str[2,string]){
                            print(C[2,string]+" "+Str[2,string])
                            if(C[4,string]:explode(" "):count() >1){
                                print(C[4,string])
                                Chatarg = ""
                                Chat_o = 0
                                for(I=1,C[4,string]:explode(" "):count()){
                                    print(Chatarg)
                                    if(C[4,string]:explode(" ")[I,string]=="S"){
                                        if(Str[2+I,string]:find("''")){ 
                                            #[ String's contained by double single quotation marks! ]#
                                            Chatarg = Chatarg+Str[2+I+Chat_o,string]:replace("''","")
                                            print(Str[2+I+Chat_o,string]+" : "+I+" : "+Chat_o)
                                            for(I=1,Str:count()-2){
                                                if(Str[2+I+Chat_o,string]:find("''")){
                                                    Chatarg = Chatarg+" ||"
                                                    Chat_o++
                                                }else{
                                                    Chatarg = Chatarg+Str[3+I,string]
                                                    Chat_o++
                                                }
                                            }
                                        }
                                    }elseif(C[4,string]:explode(" ")[I,string]=="N"||C[4,string]:explode(" ")[I,string]=="V"||C[4,string]:explode(" ")[I,string]=="V2"){
                                        Chatarg = Chatarg+Str[3+I+Chat_o,string]+"||"
                                    }
                                    if(I==C[4,string]:explode(" "):count()){
                                        timer(C[5,string],C[6,string]:toNumber())
                                        print("END "+Chatarg)
                                    }
                                }
                            }else{
                            
                            }
                        }
                    }
                }elseif(C[1,string]=="All"||C[1,string]==""){
                
                }
            }
        }
    }
}
if(duped()){
 selfDestruct()   
}
