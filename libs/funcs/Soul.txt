@name Searren Opperating Utillity Language core
@persist [EGP_core C]:table
@persist Sorted
#include "s1/libs/funcs/S1_funs"
#include "s1/libs/funcs/io/S1_IO"
function void pushLog(S:string,S2:string){
    if(Sys_log[S,array]:count()==0){
        Sys_log[S,array][1,string]=S2
    }else{
        Sys_log[S,array][Sys_log[S,array]:count()+1,string]=S2
    }
}
function void soulCode(S:string,N){
 Sorted = 0
    if(N!=1){
        C[1,array] = S:explode(".")
    }else{
        local S = S:explode(";")
        for(I=1,S:count()){
            C[I,array]=S[I,string]:trim():explode(".")
            if(I == S:count()){
                Sorted = 1
            }
        }
    }
    if(Sorted == 1){
        printTable(C)
        if(C[1,array][1,string]=="soulStart"){
            timer("RunSoul",0)
            SoulI = 1
        }
    }
}
function void soulCode(C2:array,N){
 local Func = C2[N,string]:explode(".")
    if(Func[1,string]=="core"){
        pushLog("S",time("day")+"/"+time("month")+"/"+time("hour")+":"+time("min")+": Entered core with '"+C[N,string]+"' function")
        if(Func[2,string]=="egp"){
            if(Func[3,string]=="group"){
                if(Func[4,string]=="add"){
                    ##Placeholder
                }
            }elseif(Func[3,string]=="main"){ ##core.egp.main.create.box.1.256.256.64.64.meep
                if(Func[4,string]=="create"){ ##core.egp.main.create.box.1.256.256.64.64.meep
                    if(Func:count()==11){
                        if(Func[5,string]=="box"){
                            S:egpBox(Func[6,string]:toNumber(),vec2(Func[7,string]:toNumber(),Func[8,string]:toNumber()),vec2(Func[9,string]:toNumber(),Func[10,string]:toNumber()))
                            EGP_core["group"+Func[11,string],array]:appendNum(Func[6,string]:toNumber())
                            EGP_core["items",array][Func[6,string]:toNumber(),string]=="box.static"
                        }elseif(Func[5,string]=="boxr"){
                            S:egpRoundedBox(Func[6,string]:toNumber(),vec2(Func[7,string]:toNumber(),Func[8,string]:toNumber()),vec2(Func[9,string]:toNumber(),Func[10,string]:toNumber()))
                            EGP_core["group"+Func[11,string],array]:appendNum(Func[6,string]:toNumber())
                            EGP_core["items",array][Func[6,string]:toNumber(),string]=="boxr.static"
                        }elseif(Func[5,string]=="circ"){
                            S:egpCircle(Func[6,string]:toNumber(),vec2(Func[7,string]:toNumber(),Func[8,string]:toNumber()),vec2(Func[9,string]:toNumber(),Func[10,string]:toNumber()))
                            EGP_core["group"+Func[11,string],array]:appendNum(Func[6,string]:toNumber())
                            EGP_core["items",array][Func[6,string]:toNumber(),string]=="circ.static"
                        }else{
                            print("Invalid type, got "+Func[5,string]+" expected box/boxr/circ")
                        }
                    }elseif(Func:count()==10){
                
                    }else{
                        print("Invalid amount of argumeants on function: "+C2[N,string]+" expected 11 or 10, got "+Func:count())
                    }
                }
            }
        }
    }elseif(Func[1,string]=="end"){
    
    }else{
        print("Soul: invalid entry on Function 1; "+C2[N,string]+", "+Func[1,string])
    }
}
#[ Notes
                            local Y1 = S:egpPos(Func[6,string]:toNumber()):y()-(S:egpSize(Func[6,string]:toNumber()):y()/2)
                            local X1 = S:egpPos(Func[6,string]:toNumber()):x()-(S:egpSize(Func[6,string]:toNumber()):x()/2)
                            local Y2 = S:egpPos(Func[6,string]:toNumber()):y()+(S:egpSize(Func[6,string]:toNumber()):y()/2)
                            local X2 = S:egpPos(Func[6,string]:toNumber()):x()+(S:egpSize(Func[6,string]:toNumber()):x()/2)
