@name Searren Opperating Utillity Language core
@persist [C]:table
@persist [Func Buttons Objects Groups Buttons2 Objects2 Groups2 Temp_cords Temp_sizes Temp_mat Temp_col]:array
@persist [Ph_String]:string
@persist Sorted
#include "s1/libs/funcs/S1_funs"
#include "s1/libs/funcs/io/S1_IO"
function void pushLog(S:string){
    if(Sys_log:count()==0){
        Sys_log[1,string]=S
    }else{
        Sys_log[Sys_log:count()+1,string]=S
    }
    #print(Sys_log)
}
function void soulCode(S:string,N){
 Sorted = 0
    if(N!=1){
        C[1,array] = S:explode(".")
        #printTable(C)
    }else{
        local S = S:explode(";")
        for(I=1,S:count()){
            C[I,array]=S[I,string]:trim():explode(".")
            if(I == S:count()){
                Sorted = 1
            }
        }
    }
    if(Sorted == 1){
        #printTable(C)
        if(C[1,array][1,string]=="soulStart"){
            timer("RunSoul",0)
            SoulI = 1
        }
    }
}
## V Main ##
function number soulCode(C:array,N){
 Func = C[N,string]:explode(".")
    if(Func[1,string]=="core"){
        print(8)
        pushLog(time("day")+"/"+time("month")+"/"+time("hour")+":"+time("min")+": Entered core with '"+C[N,string]+"' function")
        if(Func[2,string]=="egp"){
            print(9)
            if(Func[3,string]=="group"){
                print(10)
                if(Func[4,string]=="add"){
                    print(11)
                   ##Placeholder
                }elseif(Func[4,string]=="shift"){
                    print(12)
                    if(Func[5,string]=="main"){
                        
                    }elseif(Func[5,string]=="secondary"){
                        print(1)
                        local Items = Groups[Func[6,string]:toNumber(),string]:explode(".")
                        for(I=1,Items:count()){
                            print(2)
                            Temp_cords[I,vector2]=S:egpPos(Items[I,string]:toNumber())
                            Temp_sizes[I,vector2]=S:egpSize(Items[I,string]:toNumber())
                            Temp_col[I,vector]=S:egpColor(Items[I,string]:toNumber())
                            Temp_mat[I,string]=S:egpMaterial(Items[I,string]:toNumber())
                            if(I==Items:count()){
                                print(3)
                                for(I=1,Items:count()){
                                    print(4)                                            
                                    if(Objects[Items[I,string]:toNumber(),string]:explode(".")[1,string]=="box"){
                                        print(5)
                                        S2:egpBox(Items[I,string]:toNumber(),Temp_cords[I,vector2],Temp_sizes[I,vector2])
                                        S2:egpMaterial(Items[I,string]:toNumber(),Temp_mat[I,string])
                                        S2:egpColor(Items[I,string]:toNumber(),Temp_col[I,vector])
                                        S:egpRemove(Items[I,string]:toNumber())
                                    }
                                }
                            }
                        }
                    }
                }
            }elseif(Func[3,string]=="main"){ ##core.egp.main.create.box.1.256.256.64.64.1
                if(Func[4,string]=="create"){ ##core.egp.main.create.box.1.256.256.64.64.1
                    if(Func[5,string]=="box"){
                        S:egpBox(Func[6,string]:toNumber(),vec2(Func[7,string]:toNumber(),Func[8,string]:toNumber()),vec2(Func[9,string]:toNumber(),Func[10,string]:toNumber()))
                        Objects[Func[6,string]:toNumber(),string]="box.static."+Func[11,string]
                        Groups[Func[11,string]:toNumber(),string]=Groups[Func[11,string]:toNumber(),string]+Func[6,string]+"."
                        pushLog(time("day")+"/"+time("month")+"/"+time("hour")+":"+time("min")+": Created a box with soul")
                    }elseif(Func[5,string]=="boxr"){
                        S:egpRoundedBox(Func[6,string]:toNumber(),vec2(Func[7,string]:toNumber(),Func[8,string]:toNumber()),vec2(Func[9,string]:toNumber(),Func[10,string]:toNumber()))
                        Objects[Func[6,string]:toNumber(),string]="boxr.static."+Func[11,string]
                        Groups[Func[11,string]:toNumber(),string]=Groups[Func[11,string]:toNumber(),string]+Func[6,string]+"."
                        pushLog(time("day")+"/"+time("month")+"/"+time("hour")+":"+time("min")+": Created a rounded box with soul")
                    }elseif(Func[5,string]=="circ"){
                        S:egpCircle(Func[6,string]:toNumber(),vec2(Func[7,string]:toNumber(),Func[8,string]:toNumber()),vec2(Func[9,string]:toNumber(),Func[10,string]:toNumber()))
                        Objects[Func[6,string]:toNumber(),string]="circ.static."+Func[11,string]
                        Groups[Func[11,string]:toNumber(),string]=Groups[Func[11,string]:toNumber(),string]+Func[6,string]+"."
                        pushLog(time("day")+"/"+time("month")+"/"+time("hour")+":"+time("min")+": Created a circle with soul")
                    }elseif(Func[5,string]=="etc"){
                        Index = Func[6,string]:toNumber()
                        for(I=1,Func:count()-10){
                            if(Func[10+I,string]:find("v,")){
                                Func[10+I,string]=Func[10+I,string]:replace(Func[10+I,string],Trunk[Func[10+I,string]:explode("v,")[2,string],string])
                                Ph_String = Ph_String+Func[10+I,string]
                            }else{
                                Ph_String = Ph_String+Func[10+I,string]                        
                            }
                                if(I==Func:count()-10){
                                    S:egpText(Func[6,string]:toNumber(),Ph_String,vec2(Func[7,string]:toNumber(),Func[8,string]:toNumber()))
                                    S:egpAlign(Func[6,string]:toNumber(),1,1)
                                    S:egpSize(Func[6,string]:toNumber(),Func[9,string]:toNumber())
                                    Objects[Func[6,string]:toNumber(),string]="text.static."+Func[10,string]
                                    Groups[Func[10,string]:toNumber(),string]=Groups[Func[10,string]:toNumber(),string]+Func[6,string]+"."
                                    pushLog(time("day")+"/"+time("month")+"/"+time("hour")+":"+time("min")+": Created text with soul")
                                    Ph_String = ""
                                }#core.egp.main.create.etc.1.256.256.10.1.t.e.x.t
                                 #core.egp.main.create.etc.1.256.256.50.1.t.e.x.t
                                 #core.egp.main.set.item.mat.3.gui/center_gradient
                            }
                        }
                }elseif(Func[4,string]=="set"){
                    if(Func[5,string]=="button"){
                        Buttons[Buttons:count()+1,string]=Func[6,string]+"."+Func[7,string]+"."+Func[8,string]
                        Objects[Func[6,string]:toNumber(),string]:replace("static","button")
                    }elseif(Func[5,string]=="item"){
                        if(Func[6,string]=="mat"){
                            S:egpMaterial(Func[7,string]:toNumber(),Func[8,string])
                        }elseif(Func[6,string]=="col"){
                            S:egpColor(Func[7,string]:toNumber(),vec(Func[7,string]:toNumber(),Func[8,string]:toNumber(),Func[9,string]:toNumber()))
                        }
                    }elseif(Func[5,string]=="group"){
                        local Gi = Groups[Func[7,string]:toNumber(),string]:explode(".")
                        if(Func[6,string]=="mat"){
                            for(X=1,Gi:count()){
                                S:egpMaterial(Gi[X,string]:toNumber(),Func[8,string])
                            }
                        }elseif(Func[6,string]=="col"){
                            for(X=1,Gi:count()){
                                S:egpColor(Gi[X,string]:toNumber(),vec(Func[7,string]:toNumber(),Func[8,string]:toNumber(),Func[9,string]:toNumber()))
                            }
                        }
                    }
                }
            }elseif(Func[3,string]=="secondary"){ ##### Screen two(user screen)
                if(Func[4,string]=="create"){
                    if(Func[5,string]=="box"){
                        S2:egpBox(Func[6,string]:toNumber(),vec2(Func[7,string]:toNumber(),Func[8,string]:toNumber()),vec2(Func[9,string]:toNumber(),Func[10,string]:toNumber()))
                        Objects2[Func[6,string]:toNumber(),string]="box.static."+Func[11,string]
                        Groups2[Func[11,string]:toNumber(),string]=Groups2[Func[11,string]:toNumber(),string]+Func[6,string]+"."
                        pushLog(time("day")+"/"+time("month")+"/"+time("hour")+":"+time("min")+": Created a box with soul")
                    }elseif(Func[5,string]=="boxr"){
                        S2:egpRoundedBox(Func[6,string]:toNumber(),vec2(Func[7,string]:toNumber(),Func[8,string]:toNumber()),vec2(Func[9,string]:toNumber(),Func[10,string]:toNumber()))
                        Objects2[Func[6,string]:toNumber(),string]="boxr.static."+Func[11,string]
                        Groups2[Func[11,string]:toNumber(),string]=Groups2[Func[11,string]:toNumber(),string]+Func[6,string]+"."
                        pushLog(time("day")+"/"+time("month")+"/"+time("hour")+":"+time("min")+": Created a rounded box with soul")
                    }elseif(Func[5,string]=="circ"){
                        S2:egpCircle(Func[6,string]:toNumber(),vec2(Func[7,string]:toNumber(),Func[8,string]:toNumber()),vec2(Func[9,string]:toNumber(),Func[10,string]:toNumber()))
                        Objects2[Func[6,string]:toNumber(),string]="circ.static."+Func[11,string]
                        Groups2[Func[11,string]:toNumber(),string]=Groups2[Func[11,string]:toNumber(),string]+Func[6,string]+"."
                        pushLog(time("day")+"/"+time("month")+"/"+time("hour")+":"+time("min")+": Created a circle with soul")
                    }elseif(Func[5,string]=="etc"){
                        Index = Func[6,string]:toNumber()
                        for(I=1,Func:count()-10){
                            if(Func[10+I,string]:find("v,")){
                                Func[10+I,string]=Func[10+I,string]:replace(Func[10+I,string],Trunk[Func[10+I,string]:explode("v,")[2,string],string])
                                Ph_String = Ph_String+Func[10+I,string]
                            }else{
                                Ph_String = Ph_String+Func[10+I,string]                        
                            }
                                if(I==Func:count()-10){
                                    S2:egpText(Func[6,string]:toNumber(),Ph_String,vec2(Func[7,string]:toNumber(),Func[8,string]:toNumber()))
                                    S2:egpAlign(Func[6,string]:toNumber(),1,1)
                                    S2:egpSize(Func[6,string]:toNumber(),Func[9,string]:toNumber())
                                    Objects2[Func[6,string]:toNumber(),string]="text.static."+Func[10,string]
                                    Groups2[Func[10,string]:toNumber(),string]=Groups2[Func[10,string]:toNumber(),string]+Func[6,string]+"."
                                    pushLog(time("day")+"/"+time("month")+"/"+time("hour")+":"+time("min")+": Created text with soul")
                                    Ph_String = ""
                                }
                            }
                        }
                }elseif(Func[4,string]=="set"){
                    if(Func[5,string]=="button"){
                        Buttons2[Buttons2:count()+1,string]=Func[6,string]+"."+Func[7,string]+"."+Func[8,string]
                        Objects2[Func[6,string]:toNumber(),string]:replace("static","button")
                    }elseif(Func[5,string]=="item"){
                        if(Func[6,string]=="mat"){
                            S2:egpMaterial(Func[7,string]:toNumber(),Func[8,string])
                        }elseif(Func[6,string]=="col"){
                            S2:egpColor(Func[7,string]:toNumber(),vec(Func[7,string]:toNumber(),Func[8,string]:toNumber(),Func[9,string]:toNumber()))
                        }
                    }elseif(Func[5,string]=="group"){
                        local Gi = Groups2[Func[7,string]:toNumber(),string]:explode(".")
                        if(Func[6,string]=="mat"){
                            for(X=1,Gi:count()){
                                S2:egpMaterial(Gi[X,string]:toNumber(),Func[8,string])
                            }
                        }elseif(Func[6,string]=="col"){
                            for(X=1,Gi:count()){
                                S2:egpColor(Gi[X,string]:toNumber(),vec(Func[7,string]:toNumber(),Func[8,string]:toNumber(),Func[9,string]:toNumber()))
                            }
                        }
                    }
                }
            }elseif(Func[3,string]=="checkb"){
                for(X=0,whatsLarger(Buttons:count(),Buttons2:count())){
                    local Info = Buttons[X,string]:explode(".")
                    local Info2 = Buttons2[X,string]:explode(".")
                    if(E:touching(S,Info[1,string]:toNumber())){
                        timer(Info[2,string],Info[3,string]:toNumber())
                        return X
                        break
                    }
                    if(E:touching(S2,Info[1,string]:toNumber())){
                        timer(Info[2,string],Info[3,string]:toNumber())
                        return X
                        break
                    }
                }
            }
        }elseif(Func[2,string]=="kill"){
            selfDestruct()
        }elseif(Func[2,string]=="restart"){
            reset()
        }elseif(Func[2,string]=="setval"){
            Trunk[Func[3,string],string]=Func[4,string]
            print(Trunk[Func[3,string],string]+"  "+Func[4,string]+"  "+Func[3,string])
        }
    }else{
        print("Soul: invalid entry on Function 1; "+C[N,string]+", "+Func[1,string])
    }
}
#[ Notes

    core.egp.main.set.button.1.eatThis.0
    
    local Y1 = S:egpPos(Func[6,string]:toNumber()):y()-(S:egpSize(Func[6,string]:toNumber()):y()/2)
    local X1 = S:egpPos(Func[6,string]:toNumber()):x()-(S:egpSize(Func[6,string]:toNumber()):x()/2)
    local Y2 = S:egpPos(Func[6,string]:toNumber()):y()+(S:egpSize(Func[6,string]:toNumber()):y()/2)
    local X2 = S:egpPos(Func[6,string]:toNumber()):x()+(S:egpSize(Func[6,string]:toNumber()):x()/2)

